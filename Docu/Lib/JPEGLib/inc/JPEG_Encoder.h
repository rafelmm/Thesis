/*
 * JPEGLib.h
 *
 *  Created on: 05/09/2014
 *      Author: miquel
 */

#ifndef JPEG_ENCODER_H_
#define JPEG_ENCODER_H_

#define SHIFT_8_BIT_IMAGE	-128
#define UNSHIFT_8_BIT_IMAGE	 128

/*Static JPEG Encoding/Decoding Quantization Table*/

static const char Quantization_Table_Luma[8][8] =
{
	{0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07},
	{0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14},
	{0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13},
    {0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A},
	{0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22},
	{0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C},
	{0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39},
	{0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32}
};

static const char Quantization_Table_Chroma[8][8] =
{
	{0x09 ,0x09 ,0x09 ,0x0C ,0x0B ,0x0C  ,0x18 ,0x0D},
	{0x0D ,0x18 ,0x32 ,0x21 ,0x1C ,0x21  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32},
	{0x32 ,0x32 ,0x32 ,0x32 ,0x32 ,0x32  ,0x32 ,0x32}
};



/** @brief Realitzaq un zigzag del buffer QF i copia els valors a ZZ
 *
 * What we do is a bit of a mystery, but trust
 * me, it works.
 *
 * @param QF Buffer 8 x 8 d'entrada
 *
 * @param ZZ Buffer de sortida
 *
 */
void ZigZag(int QF[8][8],int ZZ[64]);

/** @brief Copia els valors de ZZ a QF seguint un zig zag
 *
 *
 *
 */
void UndoZigZagQuant(char QF[8][8],const char ZZ[8][8]);



/** @brief realitza la quantitzacio JPEG
 *
 *
 *
 */
void Quantize(int F[8][8],char QT[8][8]);




/** @brief canvia el rang des valors de la matriu
 *
 * canvia el rang des valors de la matriu de 0..255 a -128..127
 *
 *
 * @param F Buffer 8 x 8
 *
 * @param UNSHIFT_8_BIT_IMAGE o SHIFT_8_BIT_IMAGE
 *
 */
void shift(int F[8][8], int value);



/*DCT */
void dct(int in[8][8], int dct[8][8]);






#endif /* JPEGLIB_H_ */
